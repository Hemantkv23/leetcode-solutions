Given an integer array nums, find the 
subarray
 with the largest sum, and return its sum.

 

Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: The subarray [4,-1,2,1] has the largest sum 6.
Example 2:

Input: nums = [1]
Output: 1
Explanation: The subarray [1] has the largest sum 1.
Example 3:

Input: nums = [5,4,-1,7,8]
Output: 23
Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.
 

Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104


Solution-

class Solution(object):
    def maxSubArray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        # maxSum = float('-inf')
        # for i in range(len(nums)):
        #     for j in range(i,len(nums)):
        #         currentSum = 0
        #         for k in range(i,j+1):
        #             currentSum += nums[k]
        #         maxSum = max(currentSum,maxSum)
        # return maxSum

        # used brute force, time complexity is O(n3)--> very bad, Time Limit will exceed

#2nd Approch

        # maxSum = float('-inf')
        # for i in range(len(nums)):
        #     currentSum = 0
        #     for j in range(i,len(nums)):
        #         currentSum += nums[j]
        #         maxSum=max(currentSum, maxSum)
        # return maxSum
        # better solution, time complexity is O(n2)

#3rd Optimal Solution

        maxSum = float('-inf')
        currentSum = 0
        for i in nums:
            currentSum += i
            maxSum = max(currentSum, maxSum)
            if currentSum<0:
                currentSum = 0
        return maxSum
